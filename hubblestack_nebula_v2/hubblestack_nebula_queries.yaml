fifteen_min:
  running_procs:
    query: SELECT t.unix_time AS query_time, p.name AS process, p.pid AS process_id, p.pgroup AS process_group, p.state AS process_state, p.cmdline, p.cwd, p.on_disk, p.resident_size AS mem_used, p.user_time, p.system_time, (SELECT strftime('%s','now')-ut.total_seconds+p.start_time FROM uptime AS ut) AS process_start_time, pn.cgroup_namespace, pn.ipc_namespace, pn.mnt_namespace, pn.net_namespace, pn.pid_namespace, pn.user_namespace, pn.uts_namespace, p.parent AS parent_process_id, pp.name AS parent_process, CASE WHEN count(pc.pid)>0 THEN '__JSONIFY__'||json_group_array(pc.pid) ELSE NULL END AS child_processes, g.groupname AS 'group', g.gid AS group_id, u.username AS user, u.uid AS user_id, eu.username AS effective_username, eg.groupname AS effective_groupname, p.path, h.md5 AS md5, h.sha1 AS sha1, h.sha256 AS sha256, '__JSONIFY__'||(SELECT json_group_array(json_object('fd',pof.fd, 'path',pof.path)) FROM process_open_files AS pof WHERE pof.pid=p.pid GROUP BY pof.pid) AS open_files, '__JSONIFY__'||(SELECT json_group_array(json_object('variable_name',pe.key, 'value',pe.value)) FROM process_envs AS pe WHERE pe.pid=p.pid GROUP BY pe.pid) AS environment FROM processes AS p LEFT JOIN processes AS pp ON p.parent=pp.pid LEFT JOIN processes AS pc ON pc.parent==p.pid LEFT JOIN process_namespaces AS pn ON pn.pid=p.pid LEFT JOIN users AS u ON p.uid=u.uid LEFT JOIN users AS eu ON p.euid=eu.uid LEFT JOIN groups AS g ON p.gid=g.gid LEFT JOIN groups AS eg ON p.gid=eg.gid LEFT JOIN hash AS h ON p.path=h.path LEFT JOIN time AS t WHERE p.parent IS NOT 2 AND (process NOTNULL OR p.parent NOTNULL) GROUP BY p.pid;
  established_outbound:
    query: SELECT t.unix_time AS query_time, pos.state AS connection_state, CASE pos.family WHEN 2 THEN 'ipv4' WHEN 10 THEN 'ipv6' ELSE pos.family END AS family, h.md5 AS md5, h.sha1 AS sha1, h.sha256 AS sha256, h.directory AS directory, pos.local_address AS src_connection_ip, pos.local_port AS src_connection_port, pos.remote_port AS dest_connection_port, pos.remote_address AS dest_connection_ip, p.name AS process, p.pid AS process_id, p.parent AS parent_process_id, pp.name AS parent_process, p.path AS file_path, f.size AS file_size, p.cmdline AS cmdline, u.uid AS user_id, u.username AS user, CASE pos.protocol WHEN 6 THEN 'tcp' WHEN 17 THEN 'udp' ELSE pos.protocol END AS transport, pn.cgroup_namespace, pn.ipc_namespace, pn.mnt_namespace, pn.net_namespace, pn.pid_namespace, pn.user_namespace, pn.uts_namespace FROM process_open_sockets AS pos JOIN processes AS p ON p.pid=pos.pid LEFT JOIN process_namespaces AS pn ON pn.pid=p.pid LEFT JOIN processes AS pp ON p.parent=pp.pid LEFT JOIN users AS u ON p.uid=u.uid LEFT JOIN time AS t LEFT JOIN hash AS h ON h.path=p.path LEFT JOIN file AS f ON f.path=p.path WHERE NOT pos.remote_address='' AND NOT pos.remote_address='::' AND NOT pos.remote_address='::1' AND NOT pos.remote_address='0.0.0.0' AND NOT pos.remote_address='127.0.0.1' AND (pos.local_port,pos.protocol) NOT IN (SELECT lp.port, lp.protocol FROM listening_ports AS lp);
  listening_procs:
    query: SELECT t.unix_time AS query_time, h.md5 AS md5, h.sha1 AS sha1, h.sha256 AS sha256, lp.pid AS process_id, p.pgroup AS process_group, p.name AS process, (SELECT strftime('%s','now')-ut.total_seconds+p.start_time FROM uptime AS ut) AS process_start_time, CASE lp.family WHEN 2 THEN 'ipv4' WHEN 10 THEN 'ipv6' ELSE lp.family END AS family, lp.address AS address, lp.port AS dest_port, p.path AS file_path, p.cwd, p.cmdline, p.on_disk, p.root, u.username AS user, u.uid AS user_id, g.groupname AS 'group', g.gid AS group_id, p.parent AS parent_process_id, pp.name AS parent_process, CASE lp.protocol WHEN 6 THEN 'tcp' WHEN 17 THEN 'udp' ELSE lp.protocol END AS transport, pn.cgroup_namespace, pn.ipc_namespace, pn.mnt_namespace, pn.net_namespace, pn.pid_namespace, pn.user_namespace, pn.uts_namespace FROM listening_ports AS lp LEFT JOIN processes AS p ON lp.pid=p.pid LEFT JOIN process_namespaces AS pn ON pn.pid=p.pid LEFT JOIN processes AS pp ON p.parent=pp.pid LEFT JOIN users AS u ON p.uid=u.uid LEFT JOIN groups AS g ON p.gid=g.gid LEFT JOIN time AS t LEFT JOIN hash AS h ON h.path=p.path WHERE NOT lp.family=1;
  shell_history:
    query: SELECT t.unix_time AS query_time, uid, gid, username AS user, groupname AS 'group', command, time, history_file FROM users JOIN groups USING (gid) JOIN shell_history USING (uid) LEFT JOIN time AS t WHERE time > strftime('%s', 'now', '-16 minutes');
  docker_running_procs:
    query: SELECT t.unix_time AS query_time, dc.id AS container_id, dc.name AS container_name, dc.image AS image_name, dc.image_id AS image_id, dc.command AS container_command, dc.created AS container_start_time, dc.state AS container_state, dc.status AS status, dcproc.pid AS process_id, dcproc.parent AS parent_process_id, pp.name AS parent_process, dcproc.pgroup AS process_group, dcproc.threads, dcproc.name AS process, dcproc.cmdline, dcproc.state AS process_state, p.path AS file_path, pn.cgroup_namespace, pn.ipc_namespace, pn.mnt_namespace, pn.net_namespace, pn.pid_namespace, pn.user_namespace, pn.uts_namespace, dcproc.uid AS user_id, dcproc.user AS user, dcproc.gid AS group_id, dcproc.euid AS effective_userid, dcproc.egid AS effective_groupid, dcproc.resident_size AS mem_used, (SELECT strftime('%s','now')-u.total_seconds+dcproc.start_time FROM uptime AS u) AS process_start_time, dcproc.time AS total_cpu_time, '__JSONIFY__'||(SELECT json_group_array(json_object('fd',pof.fd, 'path',pof.path)) FROM process_open_files AS pof WHERE pof.pid=dcproc.pid GROUP BY pof.pid) AS open_files, '__JSONIFY__'||(SELECT json_group_array(json_object('variable_name',pe.key, 'value',pe.value)) FROM process_envs AS pe WHERE pe.pid=dcproc.pid GROUP BY pe.pid) AS environment FROM docker_containers AS dc JOIN docker_container_processes AS dcproc USING (id) LEFT JOIN process_namespaces AS pn ON pn.pid=dcproc.pid LEFT JOIN processes AS pp ON pp.pid=dcproc.parent LEFT JOIN processes AS p ON p.pid=dcproc.pid LEFT JOIN time AS t;
hour:
  crontab:
    query: SELECT t.unix_time AS query_time, c.event, c.minute, c.hour, c.day_of_month, c.month, c.day_of_week, c.command, c.path AS cron_file FROM crontab AS c JOIN time AS t;
  login_history:
    query: SELECT t.unix_time AS query_time, l.username AS user, l.tty, l.pid, l.type AS utmp_type, CASE l.type WHEN 1 THEN 'RUN_LVL' WHEN 2 THEN 'BOOT_TIME' WHEN 3 THEN 'NEW_TIME' WHEN 4 THEN 'OLD_TIME' WHEN 5 THEN 'INIT_PROCESS' WHEN 6 THEN 'LOGIN_PROCESS' WHEN 7 THEN 'USER_PROCESS' WHEN 8 THEN 'DEAD_PROCESS' ELSE l.type END AS utmp_type_name, l.host AS src, l.time FROM last AS l LEFT JOIN time AS t WHERE (l.time > strftime('%s','now') - 3660) AND NOT (l.type=8 AND l.tty='');
  docker_running_containers:
    query: SELECT t.unix_time AS query_time, dc.id AS container_id, dc.name AS container_name, dc.image AS image_name, di.created AS image_created_time, di.size_bytes AS image_size, di.tags AS image_tags, dc.image_id AS image_id, dc.command AS container_command, dc.created AS container_start_time, dc.state AS container_state, dc.privileged, dc.status AS status, '__JSONIFY__'||(SELECT json_group_array(json_object('key',dcl.key, 'value',dcl.value)) FROM docker_container_labels AS dcl WHERE dcl.id=dc.id GROUP BY dcl.id) AS container_labels, '__JSONIFY__'||(SELECT json_group_array(json_object('mount_type',dcm.type, 'mount_name',dcm.name, 'mount_host_path',dcm.source,  'mount_container_path',dcm.destination, 'mount_driver',dcm.driver, 'mount_mode',dcm.mode, 'mount_rw',dcm.rw, 'mount_progpagation',dcm.propagation)) FROM docker_container_mounts AS dcm WHERE dcm.id=dc.id GROUP BY dcm.id) AS container_mounts, '__JSONIFY__'||(SELECT json_group_array(json_object('port_type',dcport.type, 'port',dcport.port, 'host_ip',dcport.host_ip,  'host_port',dcport.host_port)) FROM docker_container_ports AS dcport WHERE dcport.id=dc.id GROUP BY dcport.id) AS container_ports, '__JSONIFY__'||(SELECT json_group_array(json_object('network_name',dcnet.name, 'network_id',dcnet.network_id, 'endpoint_id',dcnet.endpoint_id, 'gateway',dcnet.gateway, 'container_ip',dcnet.ip_address, 'container_ip_prefix_len',dcnet.ip_prefix_len, 'ipv6_gateway',dcnet.ipv6_gateway, 'container_ipv6_address',dcnet.ipv6_address, 'container_ipv6_prefix_len',dcnet.ipv6_prefix_len, 'container_mac_address',dcnet.mac_address)) FROM docker_container_networks AS dcnet WHERE dcnet.id=dc.id GROUP BY dcnet.id) AS container_networks FROM docker_containers AS dc JOIN docker_images AS di ON di.id=dc.image_id LEFT JOIN time AS t;
  nameservers:
    query: SELECT t.unix_time AS query_time, '__JSONIFY__'||json_group_array(dr.address) AS nameservers FROM dns_resolvers AS dr, time AS t WHERE dr.type = 'nameserver';
  suid_binaries:
    query: SELECT t.unix_time AS query_time, sb.username AS user, sb.groupname AS 'group', sb.permissions, sb.path, f.uid, f.gid, f.mode AS file_acl, f.mtime AS file_modify_time, f.ctime AS file_create_time, f.type AS file_type, f.filename AS filename, h.md5 AS md5, h.sha1 AS sha1, h.sha256 AS sha256 FROM suid_bin AS sb JOIN time AS t LEFT JOIN hash AS h ON sb.path=h.path LEFT JOIN file AS f ON sb.path=f.path;
  more_suid_binaries:
    query: SELECT t.unix_time AS query_time, f.path, u.username AS user, g.groupname AS 'group', f.uid, f.gid, f.mode AS file_acl, f.mtime AS file_modify_time, f.ctime AS file_create_time, f.type AS file_type, f.filename AS filename, h.md5 AS md5, h.sha1 AS sha1, h.sha256 AS sha256 FROM users AS u JOIN file AS f ON u.uid=f.uid LEFT JOIN groups AS g ON g.gid=f.gid LEFT JOIN hash AS h ON h.path=f.path LEFT JOIN time AS t WHERE (f.directory LIKE '/root%%' OR f.directory LIKE '/usr/libexec%%' OR f.directory LIKE '/var/tmp%%' OR f.directory LIKE '/dev%%') AND (substr(f.mode,1,1) IN ('2','4','6') AND f.type='regular');
  ssh_public_keys:
    query: SELECT t.unix_time AS query_time, u.username AS user, ak.uid, ak.key AS ssh_public_key, ak.key_file AS object_path, g.gid, g.groupname AS 'group', f.mode AS file_acl, f.size AS file_size, f.atime AS file_access_time, f.mtime AS file_modify_time, f.ctime AS file_change_time, f.uid AS file_uid, f.gid AS file_gid, h.md5 AS md5, h.sha1 AS sha1, h.sha256 AS sha256 FROM users AS u JOIN authorized_keys AS ak ON u.uid=ak.uid LEFT JOIN groups AS g ON u.gid=g.gid LEFT JOIN file AS f ON ak.key_file=f.path LEFT JOIN hash AS h ON ak.key_file=h.path LEFT JOIN time AS t;
  ssh_key_files:
    query: SELECT t.unix_time AS query_time, u.username AS user, usk.uid, g.groupname AS 'group', f.gid, usk.path AS file_path, usk.encrypted, f.mode AS file_acl, f.size AS file_size, f.atime AS file_access_time, f.mtime AS file_modify_time, f.ctime AS file_change_time, h.md5 AS md5, h.sha1 AS sha1, h.sha256 AS sha256 FROM users AS u JOIN user_ssh_keys AS usk ON u.uid=usk.uid LEFT JOIN hash AS h ON h.path=usk.path LEFT JOIN file AS f ON f.path=usk.path LEFT JOIN groups AS g ON g.gid=f.gid LEFT JOIN time AS t;
  local_user_accounts:
    query: SELECT t.unix_time AS query_time, u.uid AS user_id, u.username AS user, u.description AS name, u.gid AS group_id, g.groupname AS 'group', (SELECT group_concat(gs.groupname) FROM user_groups AS ugs LEFT JOIN groups AS gs ON gs.gid=ugs.gid WHERE u.uid=ugs.uid  GROUP BY ugs.uid) AS all_groups, (SELECT group_concat(gs.gid) FROM user_groups AS ugs LEFT JOIN groups AS gs ON gs.gid=ugs.gid WHERE u.uid=ugs.uid GROUP BY ugs.uid) AS all_group_ids, u.shell AS shell_path, sf.mode AS shell_acl, sf.inode AS shell_inode, sf.uid AS shell_user_id, sf.gid AS shell_group_id, sf.device AS shell_device, sf.size AS shell_size, sf.atime AS shell_access_time, sf.mtime AS shell_modify_time, sf.ctime AS shell_change_time, sf.hard_links AS shell_hard_links, sh.md5 AS shell_md5, sh.sha1 AS shell_sha1, sh.sha256 AS shell_sha256, u.directory AS home_path, hf.mode AS home_acl, hf.inode AS home_inode, hf.uid AS home_user_id, hf.gid AS home_group_id, hf.device AS home_device, hf.atime AS home_access_time, hf.mtime AS home_modify_time, hf.ctime AS home_change_time, hf.hard_links AS home_hard_links FROM users AS u LEFT JOIN groups AS g ON u.gid=g.gid LEFT JOIN file AS sf ON sf.path=u.shell LEFT JOIN file AS hf ON hf.path=u.directory LEFT JOIN hash AS sh ON sh.path=u.shell LEFT JOIN time AS t;
  etc_hosts:
    query: SELECT t.unix_time AS query_time, '__JSONIFY__'||(SELECT json_group_array(json_object('address',eh.address, 'hostnames',eh.hostnames)) FROM etc_hosts AS eh) AS etc_hosts FROM time AS t;
day:
  rpm_packages:
    query: SELECT t.unix_time AS query_time, rpm.name, rpm.version, rpm.release, rpm.source AS package_source, rpm.size, rpm.sha1, rpm.arch FROM rpm_packages AS rpm JOIN time AS t;
  deb_packages:
    query: SELECT t.unix_time AS query_time, deb.name, deb.version, deb.revision, deb.source AS package_source, deb.size, deb.arch FROM deb_packages AS deb JOIN time AS t;
  os_info:
    query: SELECT t.unix_time AS query_time, os.* FROM os_version AS os LEFT JOIN time AS t;
  interface_addresses:
    query: SELECT t.unix_time AS query_time, ia.interface, ia.address, id.mac, (SELECT filename FROM file WHERE directory='/sys/class/net/' AND inode = (SELECT inode FROM file WHERE path='/sys/class/net/'||id.interface||'/brport/bridge')) AS bridge, id.pci_slot AS pci_device_id FROM interface_addresses AS ia JOIN interface_details AS id ON ia.interface=id.interface LEFT JOIN time AS t WHERE NOT ia.interface='lo';
  routes:
    query: SELECT DISTINCT t.unix_time AS query_time, r.destination AS route_destination, r.netmask AS route_netmask, r.gateway, r.source AS source_ip, r.flags AS route_flags, r.interface AS interface, r.metric AS route_metric, r.type AS route_type FROM routes AS r LEFT JOIN time AS t WHERE NOT ((type='broadcast' OR type='other') AND interface='lo');
  uptime:
    query: SELECT t.unix_time AS query_time, total_seconds AS uptime, strftime('%s','now')-u.total_seconds AS system_start_time FROM uptime AS u LEFT JOIN time AS t;
  mounts:
    query: SELECT t.unix_time AS query_time, m.* FROM mounts AS m LEFT JOIN time AS t;
  iptables_rules:
    query: SELECT DISTINCT t.unix_time AS query_time, ipt.filter_name, ipt.chain, ipt.policy FROM iptables AS ipt LEFT JOIN time AS t WHERE ipt.policy<>'';
  sysctl:
    query: SELECT t.unix_time AS query_time, sc.* FROM system_controls AS sc LEFT JOIN time AS t;
  kernel_info:
    query: SELECT t.unix_time AS query_time, ki.version, ki.arguments AS boot_arguments, ki.device AS boot_device, CASE WHEN ki.path<>'' THEN ki.path ELSE 'NOT_AVAILABLE' END AS boot_image, CASE WHEN ki.path<>'' THEN '/boot/'||ltrim(ki.path,'/boot/') ELSE '/boot/vmlinuz-'||ki.version END AS file_path, h.md5 AS md5, h.sha1 AS sha1, h.sha256 AS sha256, f.filename AS file_name, f.inode, f.uid, u.username AS user, f.gid, g.groupname AS 'group', f.mode AS file_acl, f.size AS file_size, f.atime AS file_access_time, f.mtime AS file_modify_time, f.ctime AS file_change_time, f.hard_links, f.type AS file_type FROM kernel_info AS ki LEFT JOIN hash AS h ON h.path=file_path LEFT JOIN file AS f ON f.path=file_path LEFT JOIN users AS u ON u.uid=f.uid LEFT JOIN groups AS g ON g.gid=f.gid LEFT JOIN time AS t;
  docker_info:
    query: SELECT t.unix_time AS query_time, di.id AS docker_id, di.storage_driver AS storage_driver, di.logging_driver AS logging_driver, di.cgroup_driver AS cgroup_driver, di.server_version AS docker_version, di.root_dir AS root_dir FROM docker_info AS di LEFT JOIN time AS t;
  system_info:
    query: SELECT t.unix_time AS query_time, si.uuid, si.cpu_type, si.cpu_subtype, si.cpu_brand, si.cpu_physical_cores, si.cpu_logical_cores, si.hardware_vendor, si.hardware_serial, si.hardware_model, (SELECT value FROM cpuid WHERE feature = 'hypervisor') AS virtual_machine, mi.memory_total, mi.memory_free, mi.swap_total, mi.swap_free, pi.vendor AS bios_vendor, pi.version AS bios_version, pi.date AS bios_date, pi.revision AS bios_revision, (SELECT average FROM load_average WHERE period = '1m') AS load_1m, (SELECT average FROM load_average WHERE period = '5m') AS load_5m, (SELECT average FROM load_average WHERE period = '15m') AS load_15m, t.local_timezone AS local_timezone FROM system_info AS si LEFT JOIN memory_info AS mi LEFT JOIN platform_info AS pi LEFT JOIN time AS t;
  hubble_log_file:
    query: SELECT t.unix_time AS query_time, f.path AS object_path, f.uid AS user_id, f.gid AS group_id, u.username AS user, g.groupname AS 'group', f.mode AS file_acl, f.size AS file_size, f.block_size AS blocks_size, m.path AS mount_path, max(length(m.path)) AS mount_path_length, m.blocks_free, m.inodes_free, m.type AS type, (m.blocks_size*m.blocks_free) AS bytes_free, (m.blocks_size*m.blocks) AS total_bytes, round((1-(m.blocks_free*1.0/m.blocks))*100,2) AS percentage_utilized FROM file AS f JOIN mounts AS m ON (m.type!='rootfs' AND instr(f.path, m.path)=1) LEFT JOIN users AS u ON u.uid=f.uid LEFT JOIN groups AS g ON g.gid=f.gid, time AS t WHERE f.path='/var/log/hubble' GROUP BY f.path;
  profile_version:
    query: SELECT t.unix_time AS query_time, '2019-08-3' AS version FROM time AS t;
  pci_devices:
    query: SELECT t.unix_time AS query_time, pi.pci_slot AS pci_slot, pi.pci_class AS pci_class, pi.driver AS driver, pi.vendor AS vendor, pi.vendor_id AS vendor_id, pi.model AS model, pi.model_id AS model_id FROM pci_devices AS pi LEFT JOIN time AS t WHERE pi.driver <> '';
